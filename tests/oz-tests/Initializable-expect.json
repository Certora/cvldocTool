[
  {
    "type": "text",
    "text": "## Verification of Initializable\n\n`Initializable` is a contract used to make constructors for upgradeable\ncontracts. This is accomplished by applying the `initializer` modifier to any\nfunction that serves as a constructor, which makes this function only\ncallable once. The secondary modifier `reinitializer` allows for upgrades\nthat change the contract's initializations. \n    \n\n### Assumptions and Simplifications\nWe assume `initializer()` and `reinitializer(1)` are equivalent if they\nboth guarentee `_initialized` to be set to 1 after a successful call. This\nallows us to use `reinitializer(n)` as a general version that also handles\nthe regular `initialzer` case.\n    \n#### Harnessing\nTwo harness versions were implemented, a simple flat contract, and a\nMulti-inheriting contract. The two versions together help us ensure there are\nNo unexpected results because of different implementions. Initializable can\nBe used in many different ways but we believe these 2 cases provide good\nCoverage for all cases. In both harnesses we use getter functions for\n`_initialized` and `_initializing` and implement  `initializer` and\n`reinitializer` functions that use their respective modifiers. We also\nImplement some versioned functions that are only callable in specific\nVersions of the contract to mimick upgrading contracts.\n    \n#### Munging\nVariables `_initialized` and `_initializing` were changed to have internal\nvisibility to be harnessable."
  },
  {
    "type": "text",
    "text": "#### Definitions"
  },
  {
    "type": "text",
    "text": "***`isUninitialized:`*** A contract's `_initialized` variable is equal to 0."
  },
  {
    "type": "text",
    "text": "***`isInitialized:`*** A contract's `_initialized` variable is greater than 0."
  },
  {
    "type": "text",
    "text": "***`isInitializedOnce:`*** A contract's `_initialized` variable is equal to 1."
  },
  {
    "type": "text",
    "text": "***`isReinitialized:`*** A contract's `_initialized` variable is greater than 1.    "
  },
  {
    "type": "text",
    "text": "***`isDisabled:`*** A contract's `_initialized` variable is equal to 255."
  },
  {
    "type": "text",
    "text": "### Properties"
  },
  {
    "type": "invariant",
    "id": "notInitializing",
    "title": "Not initializing",
    "contents": "/// A contract must only ever be in an initializing state while in the middle\n/// of a transaction execution.\ninvariant notInitializing()\n    !initializing()",
    "notice": "A contract must only ever be in an initializing state while in the middle\nof a transaction execution."
  },
  {
    "type": "rule",
    "id": "initOnce",
    "title": "Only initialized once",
    "contents": "/// An initializable contract with a function that inherits the initializer\n/// modifier must be initializable only once\nrule initOnce() {\n    uint256 val; uint256 a; uint256 b;\n\n    require isInitialized();\n    initialize@withrevert(val, a, b);\n    assert lastReverted, \"contract must only be initialized once\";\n}",
    "notice": "An initializable contract with a function that inherits the initializer\nmodifier must be initializable only once"
  },
  {
    "type": "rule",
    "id": "reinitializeEffects",
    "title": "Reinitialize effects",
    "contents": "/// Successfully calling reinitialize() with a version value of 1 must result\n/// in `_initialized` being set to 1.\nrule reinitializeEffects {\n    uint256 val; uint256 a; uint256 b;\n\n    reinitialize(val, a, b, 1);\n\n    assert isInitializedOnce(), \"reinitialize(1) must set _initialized to 1\";\n}",
    "notice": "Successfully calling reinitialize() with a version value of 1 must result\nin `_initialized` being set to 1."
  },
  {
    "type": "rule",
    "id": "initalizeEffects",
    "title": "Initalize effects",
    "contents": "/// Successfully calling `initalize()` must result in `_initialized` being set to 1.\n/// @dev We assume `initialize()` and `reinitialize(1)` are equivalent if this rule\n///      and the [above rule][#reinitalizeEffects] both pass.\nrule initalizeEffects {\n    uint256 val; uint256 a; uint256 b;\n\n    initialize(val, a, b);\n\n    assert isInitializedOnce(), \"initialize() must set _initialized to 1\";\n}",
    "notice": "Successfully calling `initalize()` must result in `_initialized` being set to 1.",
    "dev": "We assume `initialize()` and `reinitialize(1)` are equivalent if this rule\nand the [above rule][#reinitalizeEffects] both pass."
  },
  {
    "type": "rule",
    "id": "disabledStaysDisabled",
    "title": "Disabled stays disabled",
    "contents": "/// A disabled initializable contract must always stay disabled.\nrule disabledStaysDisabled(method f) {\n    env e; calldataarg args; \n\n    bool disabledBefore = isDisabled();\n    f(e, args);\n    bool disabledAfter = isDisabled();\n\n    assert disabledBefore => disabledAfter, \"a disabled initializer must stay disabled\";\n}",
    "notice": "A disabled initializable contract must always stay disabled.",
    "params": [
      {
        "name": "f",
        "type": "method"
      }
    ]
  },
  {
    "type": "rule",
    "id": "increasingInitialized",
    "title": "Increasing initialized",
    "contents": "/// The variable `_initialized` must not decrease.\nrule increasingInitialized(method f) {\n    env e; calldataarg args;\n\n    uint8 initBefore = initialized();\n    f(e, args);\n    uint8 initAfter = initialized();\n    assert initBefore <= initAfter, \"_initialized must only increase\";\n}",
    "notice": "The variable `_initialized` must not decrease.",
    "params": [
      {
        "name": "f",
        "type": "method"
      }
    ]
  },
  {
    "type": "rule",
    "id": "reinitializeIncreasesInit",
    "title": "Reinitialize increases init",
    "contents": "/// If `reinitialize(...)` was called successfuly, then the variable\n/// `_initialized` must increase.\nrule reinitializeIncreasesInit {\n    uint256 val; uint8 n; uint256 a; uint256 b;\n\n    uint8 initBefore = initialized();\n    reinitialize(val, a, b, n);\n    uint8 initAfter = initialized();\n\n    assert initAfter > initBefore, \"calling reinitialize must increase _initialized\";\n}",
    "notice": "If `reinitialize(...)` was called successfuly, then the variable\n`_initialized` must increase."
  },
  {
    "type": "rule",
    "id": "reinitializeLiveness",
    "title": "Reinitialize liveness",
    "contents": "/// `reinitialize(n)` must be callable if the contract is not in an\n/// `_initializing` state and `n` is greater than `_initialized` and less than\n/// 255\nrule reinitializeLiveness {\n    uint256 val; uint8 n; uint256 a; uint256 b;\n\n    requireInvariant notInitializing();\n    uint8 initVal = initialized();\n    reinitialize@withrevert(val, a, b, n);\n\n    assert n > initVal => !lastReverted, \"reinitialize(n) call must succeed if n was greater than _initialized\";\n}",
    "notice": "`reinitialize(n)` must be callable if the contract is not in an\n`_initializing` state and `n` is greater than `_initialized` and less than\n255"
  },
  {
    "type": "rule",
    "id": "reinitializeRule",
    "title": "Reinitialize rule",
    "contents": "/// if `reinitialize(n)` was called successfully then `n` was greater than\n/// `_initialized`.\nrule reinitializeRule {\n    uint256 val; uint8 n; uint256 a; uint256 b;\n\n    uint8 initBefore = initialized();\n    reinitialize(val, a, b, n);\n\n    assert n > initBefore;\n}",
    "notice": "if `reinitialize(n)` was called successfully then `n` was greater than\n`_initialized`."
  },
  {
    "type": "rule",
    "id": "reinitVersionCheckParent",
    "title": "Reinit version check parent",
    "contents": "/// Functions implemented in the parent contract that require `_initialized` to\n/// be a certain value are only callable when it is that value. \nrule reinitVersionCheckParent {\n    uint8 n;\n\n    returnsVN(n);\n    assert initialized() == n, \"parent contract's version n functions must only be callable in version n\";\n}",
    "notice": "Functions implemented in the parent contract that require `_initialized` to\nbe a certain value are only callable when it is that value. "
  },
  {
    "type": "rule",
    "id": "reinitVersionCheckChild",
    "title": "Reinit version check child",
    "contents": "/// Functions implemented in the child contract that require `_initialized` to\n/// be a certain value are only callable when it is that value.\nrule reinitVersionCheckChild {\n    uint8 n;\n\n    returnsAVN(n);\n    assert initialized() == n, \"child contract's version n functions must only be callable in version n\";\n}",
    "notice": "Functions implemented in the child contract that require `_initialized` to\nbe a certain value are only callable when it is that value."
  },
  {
    "type": "rule",
    "id": "reinitVersionCheckGrandchild",
    "title": "Reinit version check grandchild",
    "contents": "/// Functions implemented in the grandchild contract that require `_initialized`\n/// to be a certain value are only callable when it is that value.\nrule reinitVersionCheckGrandchild {\n    uint8 n;\n\n    returnsBVN(n);\n    assert initialized() == n, \"gransdchild contract's version n functions must only be callable in version n\";\n}",
    "notice": "Functions implemented in the grandchild contract that require `_initialized`\nto be a certain value are only callable when it is that value."
  },
  {
    "type": "rule",
    "id": "inheritanceCheck",
    "title": "Inheritance check",
    "contents": "/// Calling parent initalizer function must initialize all child contracts.\nrule inheritanceCheck {\n    uint256 val; uint8 n; uint256 a; uint256 b;\n\n    reinitialize(val, a, b, n);\n    assert val() == val && a() == a && b() == b, \"all child contract values must be initialized\";\n}",
    "notice": "Calling parent initalizer function must initialize all child contracts."
  }
]
