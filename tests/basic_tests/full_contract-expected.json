[
    {
        "type": "text",
        "text": "# testing the NatSpec parser.\nThis is made by Gabriel  it contains all\nknown tags"
    },
    {
        "content": "/**\n * @title takeTwoEnvs function\n * @param e1 - first environment\n * @param e2 - second environment\n **/",
        "id": "takeTwoEnvs",
        "title": "takeTwoEnvs function",
        "type": "function",
        "params": [
            {
                "type": "env",
                "name": "e1",
                "comment": "e1 - first environment"
            },
            {
                "type": "env",
                "name": "e2",
                "comment": "e2 - second environment"
            }
        ],
        "return": {
            "type": "None"
        }
    },
    {
        "content": "/**\n * @title callGet5 function calling get5\n * @notice no parameters\n **/",
        "id": "callGet5",
        "title": "callGet5 function calling get5",
        "type": "function",
        "return": {
            "type": "None"
        },
        "notice": "no parameters"
    },
    {
        "content": "/**\n * @title my_invariant invariant!\n * @notice ensuring get5 is always equal 5\n **/",
        "id": "my_invariant",
        "title": "my_invariant invariant!",
        "type": "invariant",
        "return": {
            "type": "None"
        },
        "notice": "ensuring get5 is always equal 5"
    },
    {
        "content": "/**\n * @title a wrapper of callGet5!\n * @notice ensuring get5 is always equal 5\n **/",
        "id": "wrapper",
        "title": "a wrapper of callGet5!",
        "type": "rule",
        "return": {
            "type": "None"
        },
        "notice": "ensuring get5 is always equal 5"
    },
    {
        "type": "text",
        "text": "# this is a new part of the spec\n# it provides further coverage of the basic rules."
    },
    {
        "content": "/**\n * @title inlineInvoke\n * @notice invoking in inline fashion the setX and getX functions\n **/",
        "id": "inlineInvoke",
        "title": "inlineInvoke",
        "type": "rule",
        "return": {
            "type": "None"
        },
        "notice": "invoking in inline fashion the setX and getX functions"
    },
    {
        "content": "/**\n * @title a wrapper of callGet5!\n * @notice ensuring get5 is always equal 5\n **/",
        "id": "inlineInvokeCanRevert",
        "title": "a wrapper of callGet5!",
        "type": "rule",
        "return": {
            "type": "None"
        },
        "notice": "ensuring get5 is always equal 5"
    },
    {
        "content": "/**\n * @title a parametric rule!\n * @notice asserting any method\n * @param f  the method being checked.\n **/",
        "id": "parametric",
        "title": "a parametric rule!",
        "type": "rule",
        "params": [
            {
                "type": "method",
                "name": "f",
                "comment": "f  the method being checked."
            }
        ],
        "return": {
            "type": "None"
        },
        "notice": "asserting any method"
    },
    {
        "content": "/**\n * @title a 3 return rule!\n * @notice checking the summation\n * @param n is the first argument\n * @param m is the second argument\n **/",
        "id": "threeReturns",
        "title": "a 3 return rule!",
        "type": "rule",
        "params": [
            {
                "type": "uint256",
                "name": "n",
                "comment": "n is the first argument"
            },
            {
                "type": "uint256",
                "name": "m",
                "comment": "m is the second argument"
            }
        ],
        "return": {
            "type": "None"
        },
        "notice": "checking the summation"
    }
]