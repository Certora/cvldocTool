[
    {
        "type": "text",
        "text": "# testing the NatSpec parser.\nThis is made by Gabriel  it contains all\nknown tags\n"
    },
    {
        "content": "require e1.msg.value == 0;\r\n    require e1.msg.sender == e2.msg.sender;",
        "type": "function",
        "params": [
            {
                "type": "env",
                "name": "e1",
                "comment": "e1 - first environment"
            },
            {
                "type": "env",
                "name": "e2",
                "comment": "e2 - second environment"
            }
        ],
        "return": {
            "type": "None"
        },
        "title": "takeTwoEnvs function"
    },
    {
        "content": "assert get5() == 5;",
        "type": "function",
        "params": [],
        "return": {
            "type": "None"
        },
        "title": "callGet5 function calling get5",
        "notice": "no parameters"
    },
    {
        "content": "preserved init_state() {\r\n        require getX() == 20;\r\n    }",
        "type": "invariant",
        "params": [],
        "return": {
            "type": "None"
        },
        "title": "my_invariant invariant!",
        "notice": "ensuring get5 is always equal 5"
    },
    {
        "content": "callGet5();\r\n    assert true;",
        "type": "rule",
        "params": [],
        "return": {
            "type": "None"
        },
        "title": "a wrapper of callGet5!",
        "notice": "ensuring get5 is always equal 5"
    },
    {
        "type": "text",
        "text": "# this is a new part of the spec\n# it provides further coverage of the basic rules."
    },
    {
        "content": "uint n;\r\n    // invoke as a command\r\n    setX(n);\r\n    // invoke as an expression\r\n    assert getX() == n;",
        "type": "rule",
        "params": [],
        "return": {
            "type": "None"
        },
        "title": "inlineInvoke",
        "notice": "invoking in inline fashion the setX and getX functions"
    },
    {
        "content": "uint n;\r\n    uint m;\r\n    // invoke as a command\r\n    setX(n);\r\n    // invoke as an expression\r\n    assert getXCanRevert@withrevert(m) == n;",
        "type": "rule",
        "params": [],
        "return": {
            "type": "None"
        },
        "title": "a wrapper of callGet5!",
        "notice": "ensuring get5 is always equal 5"
    },
    {
        "content": "env e;\r\n    calldataarg args;\r\n    f(e, args);\r\n    assert true;",
        "type": "rule",
        "params": [
            {
                "type": "method",
                "name": "f",
                "comment": "f  the method being checked."
            }
        ],
        "return": {
            "type": "None"
        },
        "title": "a parametric rule!",
        "notice": "asserting any method"
    },
    {
        "content": "env e;\r\n    uint256 nPlusX;\r\n    uint256 nPlusXPlusM;\r\n    uint256 x;\r\n    x, nPlusX, nPlusXPlusM = threeReturns(e, n, m);\r\n    require x < 10987098;\r\n    require n < 150293879209;\r\n    require m < 1203958240;\r\n    assert nPlusX == x + n;\r\n    assert nPlusXPlusM == nPlusX + m;",
        "type": "rule",
        "params": [
            {
                "type": "uint256",
                "name": "n",
                "comment": "n is the first argument"
            },
            {
                "type": "uint256",
                "name": "m",
                "comment": "m is the second argument"
            }
        ],
        "return": {
            "type": "None"
        },
        "title": "a 3 return rule!",
        "notice": "checking the summation"
    }
]