[
    {
        "type": "text",
        "text": "## Verification of GovernorPreventLateQuorum\n\n`GovernorPreventLateQuorum` extends the Governor group of contracts to add the\nfeature of giving voters more time to vote in the case that a proposal reaches\nquorum with less than `voteExtension` amount of time left to vote.\n\n### Assumptions and Simplifications\n\nNone\n\n#### Harnessing\n- The contract that the specification was verified against is\n`GovernorPreventLateQuorumHarness`, which inherits from all of the Governor\ncontracts \u2014 excluding Compound variations \u2014 and implements a number of view\nfunctions to gain access to values that are impossible/difficult to access in\nCVL. It also implements all of the required functions not implemented in the\nabstract contracts it inherits from.\n\n- `_castVote` was overriden to add an additional flag before calling the parent\nversion. This flag stores the `block.number` in a variable\n`latestCastVoteCall` and is used as a way to check when any of variations of\n`castVote` are called.\n\n#### Munging\n\n- Various variables' visibility was changed from private to internal or from\ninternal to public throughout the Governor contracts in order to make them\naccessible in the spec.\n\n- Arbitrary low level calls are assumed to change nothing and thus the function\n`_execute` is changed to do nothing. The tool normally havocs in this\nsituation, assuming all storage can change due to possible reentrancy. We\nassume, however, there is no risk of reentrancy because `_execute` is a\nprotected call locked behind the timelocked governance vote. All other\ngovernance functions are verified separately."
    },
    {
        "type": "text",
        "text": "Helper Functions"
    },
    {
        "type": "text",
        "text": "#### Definitions"
    },
    {
        "type": "text",
        "text": "***`deadlineExtendible:`*** A proposal is defined to be `deadlineExtendible` if its respective `extendedDeadline` variable is unset and quorum on that proposal has not been reached."
    },
    {
        "type": "text",
        "text": "***`deadlineExtended:`*** A proposal is defined to be `deadlineExtended` if its respective `extendedDeadline` variable is set and quorum on that proposal has been reached."
    },
    {
        "type": "text",
        "text": "***`proposalNotCreated:`*** A proposal is defined to be `proposalNotCreated` if its snapshot (block.number at which voting started), deadline, and `totalVotes` all equal 0."
    },
    {
        "type": "text",
        "text": "### Properties"
    },
    {
        "content": "/**\n * If a proposal has reached quorum then the proposal snapshot (start `block.number`) must be non-zero\n * @dev INVARIANT NOT PASSING // fails for updateQuorumNumerator and in the initial state when voting token total supply is 0 (causes quoromReached to return true)\n * @dev ADVANCED SANITY NOT RAN\n */",
        "id": "quorumReachedEffect",
        "title": "Quorum reached effect",
        "type": "invariant",
        "params": [
            {
                "type": "env",
                "name": "e"
            },
            {
                "type": "uint256",
                "name": "pId"
            }
        ],
        "return": {
            "type": "None"
        },
        "notice": "If a proposal has reached quorum then the proposal snapshot (start `block.number`) must be non-zero",
        "dev": "ADVANCED SANITY NOT RAN"
    },
    {
        "content": "/**\n * A created propsal must be in state deadlineExtendable or deadlineExtended.\n * @dev INVARIANT NOT PASSING // fails for updateQuorumNumerator and in the initial state when voting token total supply is 0 (causes quoromReached to return true)\n * @dev ADVANCED SANITY NOT RAN \n */",
        "id": "proposalInOneState",
        "title": "Proposal in one state",
        "type": "invariant",
        "params": [
            {
                "type": "env",
                "name": "e"
            },
            {
                "type": "uint256",
                "name": "pId"
            }
        ],
        "return": {
            "type": "None"
        },
        "notice": "A created propsal must be in state deadlineExtendable or deadlineExtended.",
        "dev": "ADVANCED SANITY NOT RAN"
    },
    {
        "type": "text",
        "text": "#### first set of rules"
    },
    {
        "type": "text",
        "text": "The rules [R1](#deadlineChangeEffects) and [R2](#deadlineCantBeUnextended)\nare assumed in rule [R3](#canExtendDeadlineOnce), so we prove them first."
    },
    {
        "content": "/**\n * If deadline increases then we are in `deadlineExtended` state and `castVote`\n * was called.\n * @dev RULE PASSING\n * @dev ADVANCED SANITY PASSING \n */",
        "id": "deadlineChangeEffects",
        "title": "Deadline change effects",
        "type": "rule",
        "params": [
            {
                "type": "method",
                "name": "f"
            }
        ],
        "return": {
            "type": "None"
        },
        "notice": "If deadline increases then we are in `deadlineExtended` state and `castVote`\nwas called.",
        "dev": "ADVANCED SANITY PASSING"
    },
    {
        "content": "/**\n * @title Deadline can't be unextended\n * @notice A proposal can't leave `deadlineExtended` state.\n * @dev RULE PASSING\n * @dev ADVANCED SANITY PASSING \n */",
        "id": "deadlineCantBeUnextended",
        "title": "Deadline can't be unextended",
        "type": "rule",
        "params": [
            {
                "type": "method",
                "name": "f"
            }
        ],
        "return": {
            "type": "None"
        },
        "notice": "A proposal can't leave `deadlineExtended` state.",
        "dev": "ADVANCED SANITY PASSING"
    },
    {
        "content": "/**\n * A proposal's deadline can't change in `deadlineExtended` state.\n * @dev RULE PASSING\n * @dev ADVANCED SANITY PASSING \n */",
        "id": "canExtendDeadlineOnce",
        "title": "Can extend deadline once",
        "type": "rule",
        "params": [
            {
                "type": "method",
                "name": "f"
            }
        ],
        "return": {
            "type": "None"
        },
        "notice": "A proposal's deadline can't change in `deadlineExtended` state.",
        "dev": "ADVANCED SANITY PASSING"
    },
    {
        "type": "text",
        "text": "#### second set of rules"
    },
    {
        "type": "text",
        "text": "The main rule in this section is [the deadline can only extended if quorum reached w/ <= timeOfExtension left to vote](#deadlineExtenededIfQuorumReached)\nThe other rules of this section are assumed in the proof, so we prove them\nfirst."
    },
    {
        "content": "/**\n * A change in hasVoted must be correlated with an increasing of the vote\n * supports, i.e. casting a vote increases the total number of votes.\n * @dev RULE PASSING\n * @dev ADVANCED SANITY PASSING\n */",
        "id": "hasVotedCorrelationNonzero",
        "title": "Has voted correlation nonzero",
        "type": "rule",
        "params": [
            {
                "type": "uint256",
                "name": "pId"
            },
            {
                "type": "method",
                "name": "f"
            },
            {
                "type": "env",
                "name": "e"
            }
        ],
        "return": {
            "type": "None"
        },
        "notice": "A change in hasVoted must be correlated with an increasing of the vote\nsupports, i.e. casting a vote increases the total number of votes.",
        "dev": "ADVANCED SANITY PASSING"
    },
    {
        "content": "/**\n * @title Against votes don't count\n * @notice An against vote does not make a proposal reach quorum.\n * @dev RULE PASSING\n * @dev --ADVANCED SANITY PASSING vacuous but keeping\n */",
        "id": "againstVotesDontCount",
        "title": "Against votes don't count",
        "type": "rule",
        "params": [
            {
                "type": "method",
                "name": "f"
            }
        ],
        "return": {
            "type": "None"
        },
        "notice": "An against vote does not make a proposal reach quorum.",
        "dev": "--ADVANCED SANITY PASSING vacuous but keeping"
    },
    {
        "content": "/**\n * Deadline can only be extended from a `deadlineExtendible` state with quorum being reached with <= `lateQuorumVoteExtension` time left to vote\n * @dev RULE PASSING\n * @dev ADVANCED SANITY PASSING \n */",
        "id": "deadlineExtenededIfQuorumReached",
        "title": "Deadline exteneded if quorum reached",
        "type": "rule",
        "params": [
            {
                "type": "method",
                "name": "f"
            }
        ],
        "return": {
            "type": "None"
        },
        "notice": "Deadline can only be extended from a `deadlineExtendible` state with quorum being reached with <= `lateQuorumVoteExtension` time left to vote",
        "dev": "ADVANCED SANITY PASSING"
    },
    {
        "content": "/**\n * `extendedDeadlineField` is set iff `_castVote` is called and quroum is reached.\n * @dev RULE PASSING\n * @dev ADVANCED SANITY PASSING \n */",
        "id": "extendedDeadlineValueSetIfQuorumReached",
        "title": "Extended deadline value set if quorum reached",
        "type": "rule",
        "params": [
            {
                "type": "method",
                "name": "f"
            }
        ],
        "return": {
            "type": "None"
        },
        "notice": "`extendedDeadlineField` is set iff `_castVote` is called and quroum is reached.",
        "dev": "ADVANCED SANITY PASSING"
    },
    {
        "content": "/**\n * Deadline can never be reduced.\n * @dev RULE PASSING\n * @dev ADVANCED SANITY PASSING\n */",
        "id": "deadlineNeverReduced",
        "title": "Deadline never reduced",
        "type": "rule",
        "params": [
            {
                "type": "method",
                "name": "f"
            }
        ],
        "return": {
            "type": "None"
        },
        "notice": "Deadline can never be reduced.",
        "dev": "ADVANCED SANITY PASSING"
    }
]
