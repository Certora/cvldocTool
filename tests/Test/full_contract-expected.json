[
    {
        "type": "text",
        "header": "testing the NatSpec parser.",
        "text": "This is made by Gabriel  it contains all\nknown tags"
    },
    {
        "content": "{\r\n    require e1.msg.value == 0;\r\n    require e1.msg.sender == e2.msg.sender;\r\n}",
        "type": "function",
        "params": [
            {
                "type": "env",
                "name": "e1",
                "comment": "e1 - first environment"
            },
            {
                "type": "env",
                "name": "e2",
                "comment": "e2 - second environment"
            }
        ],
        "title": "takeTwoEnvs function"
    },
    {
        "content": "{\r\n    assert get5() == 5;\r\n}",
        "type": "function",
        "title": "callGet5 function calling get5",
        "notice": "no parameters"
    },
    {
        "type": "unknown",
        "title": "my_invariant invariant!",
        "notice": "ensuring get5 is always equal 5"
    },
    {
        "content": "{\r\n    callGet5();\r\n    assert true;\r\n}",
        "type": "rule",
        "title": "a wrapper of callGet5!",
        "notice": "ensuring get5 is always equal 5"
    },
    {
        "content": "{\r\n    uint n;\r\n    uint m;\r\n    // invoke as a command\r\n    setX(n);\r\n    // invoke as an expression\r\n    assert getXCanRevert@withrevert(m) == n;\r\n}",
        "type": "rule",
        "title": "a wrapper of callGet5!",
        "notice": "ensuring get5 is always equal 5"
    },
    {
        "content": "{\r\n    env e;\r\n    calldataarg args;\r\n    f(e, args);\r\n    assert true;\r\n}",
        "type": "rule",
        "params": [
            {
                "type": "method",
                "name": "f",
                "comment": "f  the method being checked."
            }
        ],
        "title": "a parametric rule!",
        "notice": "asserting any method"
    },
    {
        "content": "{\r\n    env e;\r\n    uint256 nPlusX;\r\n    uint256 nPlusXPlusM;\r\n    uint256 x;\r\n    x, nPlusX, nPlusXPlusM = threeReturns(e, n, m);\r\n    require x < 10987098;\r\n    require n < 150293879209;\r\n    require m < 1203958240;\r\n    assert nPlusX == x + n;\r\n    assert nPlusXPlusM == nPlusX + m;\r\n}",
        "type": "rule",
        "params": [
            {
                "type": "uint256",
                "name": "n",
                "comment": "n is the first argument"
            },
            {
                "type": "uint256",
                "name": "m",
                "comment": "m is the second argument"
            }
        ],
        "title": "a 3 return rule!",
        "notice": "checking the summation"
    }
]